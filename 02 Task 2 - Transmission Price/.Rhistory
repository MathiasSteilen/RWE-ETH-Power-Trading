scale_x_datetime(date_labels = "%Y-%m", date_breaks="4 months") +
labs(title = "Prices Second Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green"))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
# Chunk 14
df_box %>%
filter(date > second_cut) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = day_ahead_price_de, color = "day_ahead_price_de")) +
scale_x_datetime(date_labels = "%Y-%m", date_breaks="4 months") +
labs(title = "Prices Third Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green"))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
# Chunk 15
date_outlier <- df_box %>%
filter(day_ahead_price_de == min(day_ahead_price_de)) %>%
pull(date)
# Chunk 16
library(fastTS)
library(xts)
substrings_to_remove <- c('_ch_de', '_de_ch', '_at', '_fr', '_ch', '_de',
'_it', '_missing_dummy', '_FR_CH', '_lu')
variable_names <- df %>% colnames() %>%
map(~str_remove_all(., paste(substrings_to_remove, collapse = "|")))  %>%
unlist() %>%
unique()
variable_names
variable_forecast <- variable_names[str_detect(variable_names, 'forecast')] %>%
str_remove('_forecast')
variable_forecast
n <- nrow(df)
lag = 24
variable_forecast <- grep("forecast", names(df), value = TRUE)
df_1 <- df %>%
select(c(date, day_ahead_price_de,
variable_forecast)) %>%
slice(1:(n-lag))
#prices other countries
x1 <- df %>%
select(c(day_ahead_price_at, day_ahead_price_fr, day_ahead_price_it,
auction_price_ch_de, auction_price_de_ch, day_ahead_price_ch,
allocatedCapacity_ch_de, allocatedCapacity_de_ch, ATC_ch_de, ATC_de_ch, actual_load_at, actual_load_de, actual_load_ch, actual_load_ch_missing_dummy, actual_load_fr_missing_dummy, actual_load_it_missing_dummy, actual_load_it, actual_load_fr, crossborder_actual_flow_at_ch, crossborder_actual_flow_ch_at, crossborder_actual_flow_ch_de_lu, crossborder_actual_flow_ch_fr, crossborder_actual_flow_ch_it, crossborder_actual_flow_de_lu_ch, crossborder_actual_flow_fr_ch, crossborder_actual_flow_it_ch, crossborder_actual_flow_at_ch_missing_dummy, crossborder_actual_flow_ch_at_missing_dummy, crossborder_actual_flow_ch_de_lu_missing_dummy, crossborder_actual_flow_ch_fr_missing_dummy, crossborder_actual_flow_ch_it_missing_dummy, crossborder_actual_flow_de_lu_ch_missing_dummy, crossborder_actual_flow_fr_ch_missing_dummy, crossborder_actual_flow_it_ch_missing_dummy)) %>%
slice((lag+1):n)
df_1 <- cbind(df_1, x1)
#name_temp <- colnames(df_1)
#x <- df %>%
#  select(-name_temp) %>%
#  slice(1:(n-lag))
#
#df_2 <- cbind(df_1, x)
#
#x <- df %>%
#  select(-name_temp) %>%
#  slice((lag+1):n)
#
#df_3 <- cbind(df_1, x)
df_1 <- bind_cols(df_1, x1)
models <- df_1 %>%
mutate(day_ahead_price_de = boxcox_transform(day_ahead_price_de)) %>%
model_list()
#model <- model_list$fits[[position of best gamma]]
#find best gamma in summary
model_selected <- function(model_list, model, p.train = 0.8){
pos <- which.min(model$loss)
pred <- model$beta[ , pos]
X <- cbind(rep(1, nrow(fit1$Xfulltrain)), fit1$Xfulltrain)
fitted <- X %*% pred %>% matrix(ncol = 1)
date_index <- index(fit1$y_cc_train)
de <- coredata(fit1$y_cc_train)
sol <- data.frame('day_ahead_price_de' = de,
'fitted_day_ahead_price_de' = fitted,
'date' = date_index)
sol <- sol %>%
mutate(difference = day_ahead_price_de - fitted_day_ahead_price_de)
sol %>%
ggplot(aes(x = date))+
scale_x_datetime(date_labels = "%Y-%m") +
geom_line(aes(y = fitted_day_ahead_price_de, col = 'fitted_day_ahead_price_de'))+
geom_line(aes(y = day_ahead_price_de, col = 'day_ahead_price_de')) +
labs(title = "Prices Germany and Fitted fastTS",
x = "Hourly data",
y = "Price",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green", "fitted_day_ahead_price_de" = "blue"))
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
sol %>%
ggplot(aes(x = date))+
scale_x_datetime(date_labels = "%Y-%m") +
geom_line(aes(y = difference, col = 3))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
return(list(sol = sol, pred = pred, model_matrix = X))
}
fastTS_stat <- function(model){
cat('Summary Model:')
summary(model)
for (i in 1:10) {cat("\n")}
cat('Results Model:')
model$oos_results
for (i in 1:10) {cat("\n")}
cat('Coefficient differnt from 0:')
coef(model)[coef(model) != 0,]   %>% sort(decreasing = T) %>% names()
}
model_list <- function(data, p.train = 0.8){
y <- xts(data$day_ahead_price_de,
order.by = data$date)
x <- data %>%
select(-c(date, day_ahead_price_de))
x <- x %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
model <- fastTS(y, x, ptrain = p.train)
return(model)
}
n <- nrow(df)
lag = 24
variable_forecast <- grep("forecast", names(df), value = TRUE)
df_1 <- df %>%
select(c(date, day_ahead_price_de,
variable_forecast)) %>%
slice(1:(n-lag))
#Prices other countries
x1 <- df %>%
select(c(day_ahead_price_at, day_ahead_price_fr, day_ahead_price_it,
auction_price_ch_de, auction_price_de_ch, day_ahead_price_ch,
allocatedCapacity_ch_de, allocatedCapacity_de_ch, ATC_ch_de, ATC_de_ch, actual_load_at, actual_load_de, actual_load_ch, actual_load_ch_missing_dummy, actual_load_fr_missing_dummy, actual_load_it_missing_dummy, actual_load_it, actual_load_fr, crossborder_actual_flow_at_ch, crossborder_actual_flow_ch_at, crossborder_actual_flow_ch_de_lu, crossborder_actual_flow_ch_fr, crossborder_actual_flow_ch_it, crossborder_actual_flow_de_lu_ch, crossborder_actual_flow_fr_ch, crossborder_actual_flow_it_ch, crossborder_actual_flow_at_ch_missing_dummy, crossborder_actual_flow_ch_at_missing_dummy, crossborder_actual_flow_ch_de_lu_missing_dummy, crossborder_actual_flow_ch_fr_missing_dummy, crossborder_actual_flow_ch_it_missing_dummy, crossborder_actual_flow_de_lu_ch_missing_dummy, crossborder_actual_flow_fr_ch_missing_dummy, crossborder_actual_flow_it_ch_missing_dummy)) %>%
slice((lag+1):n)
df_1 <- bind_cols(df_1, x1)
x <- df %>% select(date, dst)
x = x |>
mutate(
cal_year = year(date),
cal_month = month(date),
cal_day_in_month = day(date),
cal_day_in_week = wday(date, label = F),
cal_week_in_year = week(date),
cal_quarter = quarter(date),
cal_hour_in_day = hour(date),
)
x <- x %>%
select(-date)
x <- mutate_all(x, as.factor)
formula_str <- paste(" ~ -1 + dst + ", paste(names(x)[-which(names(x) == "dst")], collapse = " + "), " + ",
paste(names(x)[-which(names(x) == "dst")], ":", "dst", sep = "", collapse = " + "), sep = "")
formula_str <- formula(formula_str)
x <- model.matrix(formula_str, data = x)
df_1 <- bind_cols(df_1, x)
n <- nrow(df)
lag = 24
variable_forecast <- grep("forecast", names(df), value = TRUE)
df_1 <- df %>%
select(c(date, day_ahead_price_de,
variable_forecast)) %>%
slice(1:(n-lag))
#Prices other countries
x1 <- df %>%
select(c(day_ahead_price_at, day_ahead_price_fr, day_ahead_price_it,
auction_price_ch_de, auction_price_de_ch, day_ahead_price_ch,
allocatedCapacity_ch_de, allocatedCapacity_de_ch, ATC_ch_de, ATC_de_ch, actual_load_at, actual_load_de, actual_load_ch, actual_load_ch_missing_dummy, actual_load_fr_missing_dummy, actual_load_it_missing_dummy, actual_load_it, actual_load_fr, crossborder_actual_flow_at_ch, crossborder_actual_flow_ch_at, crossborder_actual_flow_ch_de_lu, crossborder_actual_flow_ch_fr, crossborder_actual_flow_ch_it, crossborder_actual_flow_de_lu_ch, crossborder_actual_flow_fr_ch, crossborder_actual_flow_it_ch, crossborder_actual_flow_at_ch_missing_dummy, crossborder_actual_flow_ch_at_missing_dummy, crossborder_actual_flow_ch_de_lu_missing_dummy, crossborder_actual_flow_ch_fr_missing_dummy, crossborder_actual_flow_ch_it_missing_dummy, crossborder_actual_flow_de_lu_ch_missing_dummy, crossborder_actual_flow_fr_ch_missing_dummy, crossborder_actual_flow_it_ch_missing_dummy)) %>%
slice((lag+1):n)
df_1 <- bind_cols(df_1, x1)
x <- df %>% select(date, dst)
x = x |>
mutate(
cal_year = year(date),
cal_month = month(date),
cal_day_in_month = day(date),
cal_day_in_week = wday(date, label = F),
cal_week_in_year = week(date),
cal_quarter = quarter(date),
cal_hour_in_day = hour(date),
)
x <- x %>%
select(-date)
x <- mutate_all(x, as.factor)
formula_str <- paste(" ~ -1 + dst + ", paste(names(x)[-which(names(x) == "dst")], collapse = " + "), " + ",
paste(names(x)[-which(names(x) == "dst")], ":", "dst", sep = "", collapse = " + "), sep = "")
formula_str <- formula(formula_str)
x <- model.matrix(formula_str, data = x)
x <- x %>%
as.data.frame() %>%
slice(1:(n-lag))
df_1 <- cbind(df_1, x)  #this model does not contain many variable
models <- df_1 %>%
mutate(day_ahead_price_de = boxcox_transform(day_ahead_price_de)) %>%
model_list()
boxcox_transform <- function(x, lambda = 0) {
y = x - min(x) + 1
if (lambda == 0) {
log(y)
} else {
(y^lambda - 1) / lambda
}
}
models <- df_1 %>%
mutate(day_ahead_price_de = boxcox_transform(day_ahead_price_de)) %>%
model_list()
models$oos_results
fastTS_stat(models)
fastTS_stat <- function(model){
cat('Summary Model:')
summary(model)
for (i in 1:10) {cat("\n")}
cat('Results Model:')
print(model$oos_results)
for (i in 1:10) {cat("\n")}
cat('Coefficient differnt from 0:')
coef(model)[coef(model) != 0,]   %>% sort(decreasing = T) %>% names()
}
fastTS_stat(models)
fastTS_stat <- function(model){
cat('Summary Model:')
print(summary(model))
for (i in 1:10) {cat("\n")}
cat('Results Model:')
print(model$oos_results)
for (i in 1:10) {cat("\n")}
cat('Coefficient differnt from 0:')
coef(model)[coef(model) != 0,]   %>% sort(decreasing = T) %>% names()
}
fastTS_stat(models)
models$gamma
models$gamma
model <- models$fits[[1]]
result1 <- model_selected(models, model)
#model <- model_list$fits[[position of best gamma]]
#find best gamma in summary
model_selected <- function(model_list, model, p.train = 0.8){
pos <- which.min(model$loss)
pred <- model$beta[ , pos]
X <- cbind(rep(1, nrow(model_list$Xfulltrain)), model_list$Xfulltrain)
fitted <- X %*% pred %>% matrix(ncol = 1)
date_index <- index(model_list$y_cc_train)
de <- coredata(model_list$y_cc_train)
sol <- data.frame('day_ahead_price_de' = de,
'fitted_day_ahead_price_de' = fitted,
'date' = date_index)
sol <- sol %>%
mutate(difference = day_ahead_price_de - fitted_day_ahead_price_de)
sol %>%
ggplot(aes(x = date))+
scale_x_datetime(date_labels = "%Y-%m") +
geom_line(aes(y = fitted_day_ahead_price_de, col = 'fitted_day_ahead_price_de'))+
geom_line(aes(y = day_ahead_price_de, col = 'day_ahead_price_de')) +
labs(title = "Prices Germany and Fitted fastTS",
x = "Hourly data",
y = "Price",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green", "fitted_day_ahead_price_de" = "blue"))
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
sol %>%
ggplot(aes(x = date))+
scale_x_datetime(date_labels = "%Y-%m") +
geom_line(aes(y = difference, col = 3))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
return(list(sol = sol, pred = pred, model_matrix = X))
}
models$gamma
model <- models$fits[[1]]
result1 <- model_selected(models, model)
#model <- model_list$fits[[position of best gamma]]
#find best gamma in summary
model_selected <- function(model_list, model, p.train = 0.8){
pos <- which.min(model$loss)
pred <- model$beta[ , pos]
X <- cbind(rep(1, nrow(model_list$Xfulltrain)), model_list$Xfulltrain)
fitted <- X %*% pred %>% matrix(ncol = 1)
date_index <- index(model_list$y_cc_train)
de <- coredata(model_list$y_cc_train)
sol <- data.frame('day_ahead_price_de' = de,
'fitted_day_ahead_price_de' = fitted,
'date' = date_index)
sol <- sol %>%
mutate(difference = day_ahead_price_de - fitted_day_ahead_price_de)
plot1 <- sol %>%
ggplot(aes(x = date))+
scale_x_datetime(date_labels = "%Y-%m") +
geom_line(aes(y = fitted_day_ahead_price_de, col = 'fitted_day_ahead_price_de'))+
geom_line(aes(y = day_ahead_price_de, col = 'day_ahead_price_de')) +
labs(title = "Prices Germany and Fitted fastTS",
x = "Hourly data",
y = "Price",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green", "fitted_day_ahead_price_de" = "blue"))
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
plot2 <- sol %>%
ggplot(aes(x = date))+
scale_x_datetime(date_labels = "%Y-%m") +
geom_line(aes(y = difference, col = 3))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
print(plot1)
print(plot2)
return(list(sol = sol, pred = pred, model_matrix = X))
}
models$gamma
model <- models$fits[[1]]
result1 <- model_selected(models, model)
models <- df_1 %>%
filter(date > second_cut) %>%
mutate(day_ahead_price_de = boxcox_transform(day_ahead_price_de)) %>%
model_list()
fastTS_stat(models)
models$gamma
model <- models$fits[[1]]
result1 <- model_selected(models, model)
acf(result1$sol$difference)
pacf(result1$sol$difference)
acf(abs(result1$sol$difference))
acf(abs(result1$sol$difference))
pacf(abs(result1$sol$difference))
qqplot(result1$sol$difference)
qqnomr(result1$sol$difference)
qqnorm(result1$sol$difference)
qqline()
qqline(result1$sol$difference)
pos <- which.min(result1$sol$difference)
qqnorm(result1$sol$difference[-pos])
qqnorm(result1$sol$difference[-pos])
qqline(result1$sol$difference[-pos])
qqnorm(scaled(result1$sol$difference[-pos])
pos <- which.min(result1$sol$difference)
qqnorm(scaled(result1$sol$difference[-pos]))
qqnorm(scale(result1$sol$difference[-pos]))
qqline(scale(result1$sol$difference[-pos]))
pos <- which.min(result1$sol$difference)
qqnorm(scale(result1$sol$difference[-pos]))
qqline(scale(result1$sol$difference[-pos]))
qqnorm(scale(result1$sol$difference[-pos]))
models <- df_1 %>%
filter(date < first_cut) %>%
mutate(day_ahead_price_de = boxcox_transform(day_ahead_price_de)) %>%
model_list()
fastTS_stat(models)
models$gamma
model <- models$fits[[1]]
result1 <- model_selected(models, model)
acf(result1$sol$difference)
pacf(result1$sol$difference)
acf(abs(result1$sol$difference))   #poblems with the absolute values
pacf(abs(result1$sol$difference))
pos <- which.min(result1$sol$difference)
qqnorm(scale(result1$sol$difference[-pos]))
qqline(scale(result1$sol$difference[-pos]))
models <- df_1 %>%
filter(date < second_cut & date > first_cut) %>%
mutate(day_ahead_price_de = boxcox_transform(day_ahead_price_de)) %>%
model_list()
fastTS_stat(models)
models$gamma
model <- models$fits[[1]]
result1 <- model_selected(models, model)
acf(result1$sol$difference)
pacf(result1$sol$difference)
acf(abs(result1$sol$difference))   #problems with the absolute values
pacf(abs(result1$sol$difference))
pos <- which.min(result1$sol$difference)
qqnorm(scale(result1$sol$difference[-pos]))
qqline(scale(result1$sol$difference[-pos]))
#Prices other countries
x1 <- df %>%
select(-colnames(df_1)) %>%
slice((lag+1):n)
#Prices other countries
x1 <- df %>%
select(-c(day_ahead_price_at, day_ahead_price_fr, day_ahead_price_it,
auction_price_ch_de, auction_price_de_ch, day_ahead_price_ch,
allocatedCapacity_ch_de, allocatedCapacity_de_ch, ATC_ch_de, ATC_de_ch, actual_load_at, actual_load_de, actual_load_ch, actual_load_ch_missing_dummy, actual_load_fr_missing_dummy, actual_load_it_missing_dummy, actual_load_it, actual_load_fr, crossborder_actual_flow_at_ch, crossborder_actual_flow_ch_at, crossborder_actual_flow_ch_de_lu, crossborder_actual_flow_ch_fr, crossborder_actual_flow_ch_it, crossborder_actual_flow_de_lu_ch, crossborder_actual_flow_fr_ch, crossborder_actual_flow_it_ch, crossborder_actual_flow_at_ch_missing_dummy, crossborder_actual_flow_ch_at_missing_dummy, crossborder_actual_flow_ch_de_lu_missing_dummy, crossborder_actual_flow_ch_fr_missing_dummy, crossborder_actual_flow_ch_it_missing_dummy, crossborder_actual_flow_de_lu_ch_missing_dummy, crossborder_actual_flow_fr_ch_missing_dummy, crossborder_actual_flow_it_ch_missing_dummy,date, day_ahead_price_de,
variable_forecast)) %>%
slice((lag+1):n)
df_2 <- bind_cols(df_1, x1)
models <- df_2 %>%
filter(date > second_cut) %>%
mutate(day_ahead_price_de = boxcox_transform(day_ahead_price_de)) %>%
model_list()
fastTS_stat(models)
models$gamma
model <- models$fits[[1]]
result1 <- model_selected(models, model)
acf(result1$sol$difference)
pacf(result1$sol$difference)
acf(abs(result1$sol$difference))   #poblems with the absolute values
pacf(abs(result1$sol$difference))
models <- df_2 %>%
filter(date < first_cut) %>%
mutate(day_ahead_price_de = boxcox_transform(day_ahead_price_de)) %>%
model_list()
fastTS_stat(models)
models$gamma
model <- models$fits[[1]]
result1 <- model_selected(models, model)
acf(result1$sol$difference)
pacf(result1$sol$difference)
acf(abs(result1$sol$difference))   #poblems with the absolute values
pacf(abs(result1$sol$difference))
models <- df_2 %>%
filter(date > first_cut & date < second_cut) %>%
mutate(day_ahead_price_de = boxcox_transform(day_ahead_price_de)) %>%
model_list()
fastTS_stat(models)
models$gamma
model <- models$fits[[1]]
result1 <- model_selected(models, model)
acf(result1$sol$difference)
pacf(result1$sol$difference)
acf(abs(result1$sol$difference))   #poblems with the absolute values
pacf(abs(result1$sol$difference))
acf(result1$sol$difference)
pacf(result1$sol$difference)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggsci)
library(scales)
library(shiny)
library(ncvreg)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Default theme for charts
theme_set(
theme_bw() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(
face = "italic", size = 10, colour = "green50"
)
)
)
# Read data - both direction JAO
df <- read_csv("../00 Data Retrieval and Cleaning/0_df_final_imputed.csv")
df <- df %>%
mutate(date = with_tz(date, tzone = "UTC"))
df <- df %>%
mutate_at(vars(-date), as.numeric)
dummies_columns <- df %>%
select(contains("_missing_dummy")) %>%
colnames()
factor_colums <- c('dst', dummies_columns)
df <- df %>%
mutate_at(vars(factor_colums), factor)
first_cut <- as.POSIXct("2021-06-30 23:00:00", tz = "UTC")
second_cut <- as.POSIXct("2022-12-31 23:00:00", tz = "UTC")
prices_name <- c('day_ahead_price_de',
'day_ahead_price_ch',
'auction_price_ch_de',
'auction_price_de_ch')
df_box <- df %>%
select(c('date', prices_name))
#log_transform <- function(x) {
#  log_shifted <- log(x - min(x) + 1)  # Shift all values to ensure positivity
#  return(log_shifted)
#}
boxcox_transform <- function(x, lambda = 0) {
y = x - min(x) + 1
if (lambda == 0) {
log(y)
} else {
(y^lambda - 1) / lambda
}
}
df_box <- df_box %>%
mutate_at(vars(all_of(prices_name)), ~ boxcox_transform(., lambda = 0))
df_box %>%
filter(date < first_cut) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = day_ahead_price_de, color = "day_ahead_price_de")) +
geom_line(aes(y = day_ahead_price_ch, color = "day_ahead_price_ch")) +
labs(title = "Prices First Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green", "day_ahead_price_ch" = "red"))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
auction_price <- prices_name[3:4]
df_box[, auction_price] <- df[, auction_price]
df_box <- df_box %>%
mutate_at(vars(all_of(auction_price)), ~ boxcox_transform(., lambda = -0.001))
substrings_to_remove <- c('_ch_de', '_de_ch', '_at', '_fr', '_ch', '_de',
'_it', '_missing_dummy', '_FR_CH', '_lu')
variable_names <- df %>% colnames() %>%
map(~str_remove_all(., paste(substrings_to_remove, collapse = "|")))  %>%
unlist() %>%
unique()
variable_names
variable_forecast <- variable_names[str_detect(variable_names, 'forecast')] %>%
str_remove('_forecast')
variable_forecast
variable_names
df %>% dim
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggsci)
library(scales)
library(shiny)
library(ncvreg)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Default theme for charts
theme_set(
theme_bw() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(
face = "italic", size = 10, colour = "green50"
)
)
)
df_scenario_a <- read_csv("../00 Data Retrieval and Cleaning/0_df_final_imputed_shifting_a.csv")
df_scenario_a %>% summary()
