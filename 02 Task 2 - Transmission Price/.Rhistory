x1 <- df %>%
select(c(day_ahead_price_at, day_ahead_price_fr)) %>%
slice((lag+1):n)
df_1 <- cbind(df_1, x1)
name_temp <- colnames(df_1)
x <- df %>%
select(-name_temp) %>%
slice(1:(n-lag))
df_2 <- cbind(df_1, x)
x <- df %>%
select(-name_temp) %>%
slice((lag+1):n)
df_3 <- cbind(df_1, x)
library(fastTS)
library(xts)
df3 <- df_1 %>%
filter(date > second_cut) %>%
shifter_df_de()
y <- xts(df3$day_ahead_price_de,
order.by = df3$date)
x <- df3 %>%
select(-c(date, day_ahead_price_de))
x <- x %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
fit1 <- fastTS(y, x)
#x1 <- scale(x) %>% as.data.frame() %>%   select_if(~ !any(is.na(.)))
#fit2 <- fastTS(y, scale(x1))
summary(fit1)
#summary(fit2)
#res <- fit_LH$fits %>% unlist()
#
#rr <- fit_LH$ncvreg_args$y
#plot(fit_LH)
#plot(rr)
#plot(y)
#
#ff <- predict(fit_LH)
fit1$oos_results
coef(fit1)[coef(fit1) != 0] %>% sort()
cat("\n")
ll <- coef(fit2)[coef(fit2) != 0] %>% sort()-coef(fit1)[coef(fit1) != 0] %>% sort()
coef(fit1)[coef(fit1) != 0] %>% plot(type = 'l')
lol <- as.matrix(coef(fit1) %>% sort(decreasing = T))
#lol[!grepl("lag", lol)]
lol[]
coef(fit1)[coef(fit1) != 0,] %>% names()
coef(fit1)[coef(fit1) != 0,]   %>% sort(decreasing = T)) %>% names()
coef(fit1)[coef(fit1) != 0,]   %>% sort(decreasing = T) %>% names()
View(df)
View(df)
View(df_1)
View(df_1)
library(fastTS)
library(xts)
df3 <- df_2 %>%
filter(date > second_cut) %>%
shifter_df_de()
y <- xts(df3$day_ahead_price_de,
order.by = df3$date)
x <- df3 %>%
select(-c(date, day_ahead_price_de))
x <- x %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
fit1 <- fastTS(y, x)
#x1 <- scale(x) %>% as.data.frame() %>%   select_if(~ !any(is.na(.)))
#fit2 <- fastTS(y, scale(x1))
summary(fit1)
#summary(fit2)
#res <- fit_LH$fits %>% unlist()
#
#rr <- fit_LH$ncvreg_args$y
#plot(fit_LH)
#plot(rr)
#plot(y)
#
#ff <- predict(fit_LH)
summary(fit1)
coef(fit1)[coef(fit1) != 0,]   %>% sort(decreasing = T) %>% names()
library(fastTS)
library(xts)
df3 <- df_3 %>%
filter(date > second_cut) %>%
shifter_df_de()
y <- xts(df3$day_ahead_price_de,
order.by = df3$date)
x <- df3 %>%
select(-c(date, day_ahead_price_de))
x <- x %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
fit1 <- fastTS(y, x)
#x1 <- scale(x) %>% as.data.frame() %>%   select_if(~ !any(is.na(.)))
#fit2 <- fastTS(y, scale(x1))
summary(fit1)
#summary(fit2)
#res <- fit_LH$fits %>% unlist()
#
#rr <- fit_LH$ncvreg_args$y
#plot(fit_LH)
#plot(rr)
#plot(y)
#
#ff <- predict(fit_LH)
fit1$oos_results
fit2$oos_results
coef(fit1)[coef(fit1) != 0,]   %>% sort(decreasing = T) %>% names()
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggsci)
library(scales)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Default theme for charts
theme_set(
theme_bw() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(
face = "italic", size = 10, colour = "grey50"
)
)
)
# Read data - both direction JAO
data_ch_de = read_csv("../00 Data Retrieval and Cleaning/0_df_final_ch-de_UTC.csv")
data_de_ch = read_csv("../00 Data Retrieval and Cleaning/0_df_final_de-ch_UTC.csv")
data_ch_de <- data_ch_de %>%
rename(auction_price_ch_de = auction_price,
allocatedCapacity_ch_de = allocatedCapacity, ATC_ch_de = ATC)
#Initialize df that contain ALL variables
df <- data_ch_de %>%
mutate(auction_price_de_ch = data_de_ch$auction_price,
allocatedCapacity_de_ch= data_de_ch$allocatedCapacity,
ATC_de_ch= data_de_ch$ATC) %>%
arrange(date)
rm(data_ch_de, data_de_ch)
rm(list = ls())
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggsci)
library(scales)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Default theme for charts
theme_set(
theme_bw() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(
face = "italic", size = 10, colour = "green50"
)
)
)
# Chunk 2
# Read data - both direction JAO
df <- read_csv("../00 Data Retrieval and Cleaning/0_df_final_imputed.csv")
# Chunk 3
df <- df %>%
mutate_at(vars(-date), as.numeric)
dummies_columns <- df %>%
select(contains("_missing_dummy")) %>%
colnames()
factor_colums <- c('dst', dummies_columns)
df <- df %>%
mutate_at(vars(factor_colums), factor)
# Chunk 4
first_cut <- as.POSIXct("2021-06-30 23:00:00", tz = "UTC")
second_cut <- as.POSIXct("2022-12-31 23:00:00", tz = "UTC")
# Chunk 5
prices_name <- c('day_ahead_price_de',
'day_ahead_price_ch',
'auction_price_ch_de',
'auction_price_de_ch')
df_box <- df %>%
select(c('date', prices_name))
#log_transform <- function(x) {
#  log_shifted <- log(x - min(x) + 1)  # Shift all values to ensure positivity
#  return(log_shifted)
#}
boxcox_transform <- function(x, lambda) {
y = x - min(x) + 1
if (lambda == 0) {
log(y)
} else {
(y^lambda - 1) / lambda
}
}
df_box <- df_box %>%
mutate_at(vars(all_of(prices_name)), ~ boxcox_transform(., lambda = 0))
# Chunk 6
df_box %>%
filter(date < first_cut) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = day_ahead_price_de, color = "day_ahead_price_de")) +
geom_line(aes(y = day_ahead_price_ch, color = "day_ahead_price_ch")) +
labs(title = "Prices First Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green", "day_ahead_price_ch" = "red"))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
# Chunk 7
df_box %>%
filter(date < second_cut & date >= first_cut) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = day_ahead_price_de, color = "day_ahead_price_de")) +
geom_line(aes(y = day_ahead_price_ch, color = "day_ahead_price_ch")) +
labs(title = "Prices Second Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green", "day_ahead_price_ch" = "red"))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
# Chunk 8
df_box %>%
filter(date > second_cut) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = day_ahead_price_de, color = "day_ahead_price_de")) +
geom_line(aes(y = day_ahead_price_ch, color = "day_ahead_price_ch")) +
labs(title = "Prices Third Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green", "day_ahead_price_ch" = "red"))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
# Chunk 9
df_box %>%
filter(date < first_cut) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = auction_price_ch_de, color = "auction_price_ch_de")) +
geom_line(aes(y = auction_price_de_ch, color = "auction_price_de_ch")) +
labs(title = "Prices Second Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("auction_price_de_ch" = "orange", "auction_price_ch_de" = "blue" ))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
# Chunk 10
auction_price <- prices_name[3:4]
df_box[, auction_price] <- df[, auction_price]
df_box <- df_box %>%
mutate_at(vars(all_of(auction_price)), ~ boxcox_transform(., lambda = -0.001))
# Chunk 11
df_box %>%
filter(date < first_cut) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = auction_price_ch_de, color = "auction_price_ch_de")) +
geom_line(aes(y = auction_price_de_ch, color = "auction_price_de_ch")) +
labs(title = "Prices Second Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("auction_price_de_ch" = "orange", "auction_price_ch_de" = "blue" ))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
# Chunk 12
df_box %>%
filter(date < first_cut) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = day_ahead_price_de, color = "day_ahead_price_de")) +
scale_x_datetime(date_labels = "%Y-%m", date_breaks="4 months") +
labs(title = "Prices First Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green"))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
# Chunk 13
df_box %>%
filter(date < second_cut & date >= first_cut) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = day_ahead_price_de, color = "day_ahead_price_de")) +
scale_x_datetime(date_labels = "%Y-%m", date_breaks="4 months") +
labs(title = "Prices Second Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green"))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
# Chunk 14
df_box %>%
filter(date > second_cut) %>%
ggplot(aes(x = date)) +
geom_line(aes(y = day_ahead_price_de, color = "day_ahead_price_de")) +
scale_x_datetime(date_labels = "%Y-%m", date_breaks="4 months") +
labs(title = "Prices Third Period",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "green"))+
theme(plot.margin = margin(10, 10, 10, 10), legend.position = "bottom")
# Chunk 15
date_outlier <- df_box %>%
filter(day_ahead_price_de == min(day_ahead_price_de)) %>%
pull(date)
# Chunk 16
library(fastTS)
library(xts)
# Chunk 17
substrings_to_remove <- c('_ch_de', '_de_ch', '_at', '_fr', '_ch', '_de',
'_it', '_missing_dummy', '_FR_CH', '_lu')
variable_names <- df %>% colnames() %>%
map(~str_remove_all(., paste(substrings_to_remove, collapse = "|")))  %>%
unlist() %>%
unique()
variable_names
variable_forecast <- variable_names[str_detect(variable_names, 'forecast')] %>%
str_remove('_forecast')
variable_forecast
n <- nrow(df)
lag = 24
variable_forecast <- grep("forecast", names(df), value = TRUE)
df_1 <- df %>%
select(c(date, day_ahead_price_ch, day_ahead_price_de,
auction_price_ch_de, auction_price_de_ch, variable_forecast)) %>%
slice(1:(n-lag))
#prices other countries
x1 <- df %>%
select(c(day_ahead_price_at, day_ahead_price_fr)) %>%
slice((lag+1):n)
df_1 <- cbind(df_1, x1)
name_temp <- colnames(df_1)
x <- df %>%
select(-name_temp) %>%
slice(1:(n-lag))
df_2 <- cbind(df_1, x)
x <- df %>%
select(-name_temp) %>%
slice((lag+1):n)
df_3 <- cbind(df_1, x)
library(fastTS)
library(xts)
df3 <- df_3 %>%
filter(date > second_cut)
y <- xts(df3$day_ahead_price_de,
order.by = df3$date)
x <- df3 %>%
select(-c(date, day_ahead_price_de))
x <- x %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
fit1 <- fastTS(y, x)
#x1 <- scale(x) %>% as.data.frame() %>%   select_if(~ !any(is.na(.)))
#fit2 <- fastTS(y, scale(x1))
summary(fit1)
#summary(fit2)
#res <- fit_LH$fits %>% unlist()
#
#rr <- fit_LH$ncvreg_args$y
#plot(fit_LH)
#plot(rr)
#plot(y)
#
#ff <- predict(fit_LH)
coef(fit1)[coef(fit1) != 0,]   %>% sort(decreasing = T) %>% names()
View(fit1)
View(fit1)
library(fastTS)
library(xts)
df3 <- df_3 %>%
filter(date > second_cut)
y <- xts(df3$day_ahead_price_de,
order.by = df3$date)
x <- df3 %>%
select(-c(date, day_ahead_price_de))
x <- x %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
fit1 <- fastTS(y, x, w_exo="unpenalized")
#x1 <- scale(x) %>% as.data.frame() %>%   select_if(~ !any(is.na(.)))
#fit2 <- fastTS(y, scale(x1))
summary(fit1)
View(fit1)
View(fit1)
summary(fit1)
library(fastTS)
library(xts)
df3 <- df_3 %>%
filter(date > second_cut)
y <- xts(df3$day_ahead_price_de,
order.by = df3$date)
x <- df3 %>%
select(-c(date, day_ahead_price_de))
x <- x %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
fit1 <- fastTS(y, x, ptrain = 0.8)
#x1 <- scale(x) %>% as.data.frame() %>%   select_if(~ !any(is.na(.)))
#fit2 <- fastTS(y, scale(x1))
summary(fit1)
#summary(fit2)
#res <- fit_LH$fits %>% unlist()
#
#rr <- fit_LH$ncvreg_args$y
#plot(fit_LH)
#plot(rr)
#plot(y)
#
#ff <- predict(fit_LH)
plot(fit1)
coef(fit1)
lol <- fit1$fits %>% unlist()
lol[1,]
dim(lol)
length(lol)
str(lol)
lol[1:29]
lol[200:229]
lol[250:299]
lol[800:900]
lol[1000:1200]
lol[1000:1600]
lol[1000:2000]
lol[1000:3000]
lol[3000:3020]
lol[10000:10010]
lol <- fit1$fits
View(fit1)
View(fit1)
lol[1]
lol <- lol[1]
lol %>% names()
lol %>% length()
View(lol)
lol <- fit1$fits
lol <- lol[[1]]
lol$gamma
lol$linear.predictors
summary(lol)
lol
lol$penalty.factor
fit1
View(fit1)
View(fit1)
fit1
s <- summary(fit1)
s$unpenTable
library(ncvreg)
s <- summary(fit1)
s$unpenTable
s$table
frequency(y)
df$date %>% str()
df <- df %>%
mutate(date = with_tz(date, tzone = "UTC"))
df$date[1]
n <- nrow(df)
lag = 24
variable_forecast <- grep("forecast", names(df), value = TRUE)
df_1 <- df %>%
select(c(date, day_ahead_price_ch, day_ahead_price_de,
auction_price_ch_de, auction_price_de_ch, variable_forecast)) %>%
slice(1:(n-lag))
#prices other countries
x1 <- df %>%
select(c(day_ahead_price_at, day_ahead_price_fr)) %>%
slice((lag+1):n)
df_1 <- cbind(df_1, x1)
name_temp <- colnames(df_1)
x <- df %>%
select(-name_temp) %>%
slice(1:(n-lag))
df_2 <- cbind(df_1, x)
x <- df %>%
select(-name_temp) %>%
slice((lag+1):n)
df_3 <- cbind(df_1, x)
library(fastTS)
library(xts)
df3 <- df_3 %>%
filter(date > second_cut)
y <- xts(df3$day_ahead_price_de,
order.by = df3$date)
x <- df3 %>%
select(-c(date, day_ahead_price_de))
x <- x %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
fit1 <- fastTS(y, x, ptrain = 0.8)
#x1 <- scale(x) %>% as.data.frame() %>%   select_if(~ !any(is.na(.)))
#fit2 <- fastTS(y, scale(x1))
summary(fit1)
#summary(fit2)
#res <- fit_LH$fits %>% unlist()
#
#rr <- fit_LH$ncvreg_args$y
#plot(fit_LH)
#plot(rr)
#plot(y)
#
#ff <- predict(fit_LH)
frequency(y)
attributes(y)
fit1
lol <- fit1$fits
f1 <- fit1$fits[[1]]
f2 <- fit1$fits[[2]]
f1
f1$lambda
f1$gamma
summary(f1)
fit1
f1$loss
pos <- which.min(f1$loss)
pos <- which.min(f1$loss)
summary(f1, lambda = f1$lambda[pos] )
f1
f1$penalty
f1$beta
f1$beta %>% str()
f1$lambda %>% length()
f1$beta[ , pos]
