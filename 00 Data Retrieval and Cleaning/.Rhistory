df <- df %>%
arrange(date) %>%
slice(25:n())
df <- df %>%
mutate(date = with_tz(date, tzone = "UTC"))
df <- df %>%
mutate_at(vars(-date), as.numeric)
dummies_columns <- df %>%
select(contains(c("_dummy", "cal_"))) %>%
colnames()
factor_colums <- c('dst', dummies_columns)
df <- df %>%
mutate_at(vars(factor_colums), factor)
first_cut <- as.POSIXct("2021-06-30 23:00:00", tz = "UTC")
second_cut <- as.POSIXct("2022-12-31 23:00:00", tz = "UTC")
date_outlier <- df %>%
filter(day_ahead_price_de == min(day_ahead_price_de)) %>%
pull(date)
substrings_to_remove <- c('_ch_de', '_de_ch', '_at', '_fr', '_ch', '_de',
'_it', '_dummy', '_FR_CH', '_lu', '_missing')
variable_names <- df %>% colnames() %>%
map(~str_remove_all(., paste(substrings_to_remove, collapse = "|")))  %>%
unlist() %>%
unique()
variable_names
variable_forecast <- variable_names[str_detect(variable_names, 'forecast')] %>%
str_remove('_forecast')
variable_forecast
x <- df %>%
select(contains(c('cal_', 'dst')))
formula_str <- paste("~ dst +",
paste(names(x)[-which(names(x) == "dst")], " * dst", sep = "", collapse = " + "), sep = "")
formula_str <- formula(formula_str)
x <- model.matrix(formula_str, data = x) %>% as_tibble() %>% select(-contains("Intercept")) %>%
mutate_all(., as.factor)
df <- df %>%
select(-contains(c('cal_', 'dst'))) %>%
bind_cols(., x)
rm(x)
discontinue_variables <- df %>%
select(where(is.numeric)) %>%
slice(1700:1900) %>%     #easy for compuattion to subset
detect_columns_with_consecutive(n_consecutive = 13) %>%
select(-c(allocatedCapacity_ch_de, allocatedCapacity_de_ch)) %>%
select(-contains('forecast')) %>%
names()
df <- df %>%
mutate(across(all_of(discontinue_variables), ~ ksmooth_column(., band = 3)))
df <- df %>%
mutate_at(vars(all_of('day_ahead_price_de')), ~ boxcox_transform(., lambda = 0))
df %>%
nrow()
lag_1 = 24*30*6  # six month
df  %>%
filter(date < first_cut) %>%
nrow()
lag_2 = 24*3*30 # three month
df  %>%
filter(date > first_cut & date < second_cut) %>%
nrow()
lag_3 =24*2*30 #  two month
df  %>%
filter(date > second_cut) %>%
nrow()
lag_4 =24*1.5*30 # 1.5 month
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de'){
y <- data %>%
select(c('date', response)) %>%
xts(y = reponse, order.by = date)
x <- data %>%
select(-c('date', response))%>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggsci)
library(scales)
library(shiny)
library(ncvreg)
library(fastTS)
library(xts)
source('builtin_functions.R')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Default theme for charts
theme_set(
theme_bw() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(
face = "italic", size = 10, colour = "green50"
)
)
)
df1 <- df  %>%
filter(date > second_cut)
mod1 <- model_list(df1, nlag = 1)
mod1 <- model_list(df1, nlag = 100)
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de'){
y <- data %>%
select(c(date, response)) %>%
xts(y = reponse, order.by = date)
x <- data %>%
select(-c(date, response))%>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = 100)
response = 'day_ahead_price_de'
y <- df1 %>%
select(c(date, response)) %>%
xts(y = reponse, order.by = date)
y <- df1 %>%
select(c(date, response))
y %>% str()
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de'){
y <- data %>%
select(c(date, response))
y <- xts(y = y$reponse, order.by = y$date)
x <- data %>%
select(-c(date, response))%>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = 100)
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de'){
y <- data %>%
select(c(date, response))
y <- xts(y = y$response, order.by = y$date)
x <- data %>%
select(-c(date, response))%>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
rm(y)
mod1 <- model_list(df1, nlag = 100)
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de'){
y <- data %>%
select(c(date, response))
y <- xts(y = y %>% select(response), order.by = y %>% select(date))
x <- data %>%
select(-c(date, response))%>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = 100)
y <- df1 %>%
select(c(date, response))
y$date %>% head()
y %>% str()
y <- df1 %>%
select(c(date, response)) %>%
mutate(date = as.POSIXct(date, tz = "UTC"))
y %>% str()
y <- xts(y = y %>% select(response), order.by = y %>% select(date))
y <- df1 %>%
select(c(date, response)) %>%
mutate(date = with_tz(date, tzone = "UTC"))
y %>% str()
y <- xts(y = y %>% select(response), order.by = y %>% select(date))
y <- df1 %>%
select(c(date, response)) %>%
mutate(date = as.POSIXct(date))
y %>% str()
y <- xts(y = y %>% select(response), order.by = y %>% select(date))
y %>% select(date)
y <- xts(y = y %>% select(response), order.by = y %>% select(date) %>% as.POSIXct())
y <- xts(y = y %>% select(response), order.by = y %>% select(date) %>% as.POSIXct(.))
y <- xts(y = y %>% select(response), order.by = y %>% select(date) %>% mutate(date = as.POSIXct(date)))
y$response
response = 'day_ahead_price_de'
y$response
y %>% str()
rm(y)
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de'){
# Selecting and converting 'date' and 'response' columns to POSIXct format
y <- data %>%
select(date, {{ response }}) %>%
mutate({{ response }} := as.numeric({{ response }})) %>%
xts(order.by = as.POSIXct(.$date))
# Selecting and converting predictor variables to a matrix
x <- data %>%
select(-c(date, {{ response }})) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = 100)
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de'){
# Selecting and converting 'date' and 'response' columns to POSIXct format
y <- data %>%
select(date, {{ response }}) %>%
xts(order.by = as.POSIXct(.$date))
# Selecting and converting predictor variables to a matrix
x <- data %>%
select(-c(date, {{ response }})) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = 100)
y <- df1 %>%
select(date, {{ response }}) %>%
xts(order.by = as.POSIXct(.$date))
y$day_ahead_price_de %>% str()
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de'){
# Selecting and converting 'date' and 'response' columns to POSIXct format
y <- data %>%
select(date, {{ response }}) %>%
mutate({{ response }} = as.numeric({{ response }})) %>%
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de'){
# Selecting and converting 'date' and 'response' columns to POSIXct format
y <- data %>%
select(date, {{ response }}) %>%
mutate({{ response }} := as.numeric({{ response }})) %>%
xts(order.by = as.POSIXct(.$date))
# Selecting and converting predictor variables to a matrix
x <- data %>%
select(-c(date, {{ response }})) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = 100)
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de') {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- data %>%
select(date, {{ response }}) %>%
mutate({{ response }} := as.numeric({{ response }})) %>%
xts(order.by = as.POSIXct(.$date))
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c(date, {{ response }})) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
```{r}
response = 'day_ahead_price_de'
y <- df1 %>%
select(date, {{ response }}) %>%
mutate({{ response }} := as.numeric({{ response }})) %>%
xts(order.by = as.POSIXct(.$date))
y$day_ahead_price_de %>%  str()
y <- df1 %>%
select(date, {{ response }}) %>%
mutate({{ response }} := numeric({{ response }})) %>%
xts(order.by = as.POSIXct(.$date))
y <- df1 %>%
select(date, {{ response }}) %>%
mutate({{ response }} := as.numeric({{ response }})) %>%
xts(order.by = as.POSIXct(.$date))
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de') {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- data %>%
select(date, {{ response }}) %>%
mutate({{ response }} := as.numeric({{ response }})) %>%
xts(order.by = as.POSIXct(.$date))
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c(date, {{ response }})) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = 100)
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de') {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- data %>%
select(date, {{ response }}) %>%
mutate(!!response := as.numeric(!!sym(response))) %>%
xts(order.by = as.POSIXct(.$date))
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c(date, {{ response }})) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = 100)
y <- df1 %>%
select(date, {{ response }}) %>%
mutate(!!response := as.numeric(!!sym(response))) %>%
xts(order.by = as.POSIXct(.$date))
y$day_ahead_price_de %>% str()
y <- df1 %>%
select(date, {{ response }}) %>%
xts()
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de') {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = data[[response]], order.by = date)
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c('date', response)) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
rm(y)
mod1 <- model_list(df1, nlag = 100)
y <- xts(df1$day_ahead_price_de,
order.by = df1$date)
response = 'day_ahead_price_de'
y <- df1[[response]]
y %>% str()
df1$date
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de') {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = data[[response]], order.by = data$date)
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c('date', response)) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = 100)
model_list <- function(data, p.train = 0.8, nlag = 100, response = 'day_ahead_price_de') {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = data[[response]], order.by = data$date)
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c('date', response)) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = 100)
model_list <- function(data, p.train = 0.8, nlag, response = 'day_ahead_price_de') {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = data[[response]], order.by = data$date)
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c('date', response)) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
mod1 <- model_list(df1, nlag = c(1,100))
mod1 <- model_list(df1, nlag = 2))
mod1 <- model_list(df1, nlag = 2)
mod1 <- model_list(df1, nlag)
mod1 <- model_list(df1)
model_list <- function(data, p.train = 0.8, response = 'day_ahead_price_de') {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = data[[response]], order.by = data$date)
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c('date', response)) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train)
return(model)
}
mod1 <- model_list(df1)
response = 'day_ahead_price_de'
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = df1[[response]], order.by = df1$date)
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c('date', response)) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
x <- data %>%
select(-one_of(c('date', response))) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Selecting predictor variables and converting to a matrix
x <- df1 %>%
select(-one_of(c('date', response))) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train)
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = 0.8)
??fastTS
??fastTS()
?fastTS()
fastTS
parameter_checks
?parameter_checks
??parameter_checks
View(parameter_checks)
View(fastTS)
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = 0.8)
model_list <- function(data, p.train = 0.8, response = 'day_ahead_price_de') {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = data[[response]], order.by = data$date)
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c('date', response)) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train)
return(model)
}
response = 'day_ahead_price_de'
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = df1[[response]], order.by = df1$date)
# Selecting predictor variables and converting to a matrix
x <- df1 %>%
select(-one_of(c('date', response))) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = 0.8)
model_list <- function(data, p.train = 0.8, response = 'day_ahead_price_de') {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = data[[response]], order.by = data$date)
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c('date', response)) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = 1)
return(model)
}
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = 0.8)
df1 <- df  %>%
filter(date > second_cut)
y <- xts(df1$day_ahead_price_de,
order.by = df1$date)
x <- df1 %>%
select(-c(date, day_ahead_price_de))
x <- x %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
fit1 <- fastTS(y, x, ptrain = 0.8, n_lags_max = lag_4)
model_list <- function(data, p.train = 0.8, response = 'day_ahead_price_de', nlag = 100) {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = data[[response]], order.by = data$date)
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c('date', response)) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
response = 'day_ahead_price_de'
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(y = df1[[response]], order.by = df1$date)
# Selecting predictor variables and converting to a matrix
x <- df1 %>%
select(-one_of(c('date', response))) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = 0.8)
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = 0.8, n_lags_max = lag_4)
y %>% str()
df1[[response]]
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(x = df1[[response]], order.by = df1$date)
# Selecting predictor variables and converting to a matrix
x <- df1 %>%
select(-one_of(c('date', response))) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = 0.8, n_lags_max = lag_4)
model_list <- function(data, p.train = 0.8, response = 'day_ahead_price_de', nlag = 100) {
# Selecting 'date' and 'response' columns and converting 'response' to numeric
y <- xts(x = data[[response]], order.by = data$date)
# Selecting predictor variables and converting to a matrix
x <- data %>%
select(-c('date', response)) %>%
mutate(across(everything(), as.numeric)) %>%
as.matrix()
# Creating the model using fastTS
model <- fastTS(y, x, ptrain = p.train, n_lags_max = nlag)
return(model)
}
