knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggsci)
library(scales)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Default theme for charts
theme_set(
theme_bw() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(
face = "italic", size = 10, colour = "grey50"
),
plot.title.position = "plot"
)
)
# Read data
df = read_csv("../00_Data Retrieval and Cleaning/0_df_final_ch-de.csv") |>
mutate(date = ymd_hms(date)) |>
arrange(date)
# Make the chart
df |>
mutate(date = ymd_hms(date)) |>
filter(date(date) == ymd("2022-03-20")) |>
ggplot(aes(date, day_ahead_price_ch)) +
geom_point() +
geom_line() +
scale_x_datetime(date_labels = "%H:%M") +
labs(title = "Day-Ahead Prices",
y = "", x= "") +
theme(plot.margin = margin(10, 10, 10, 10))
ggsave("1_DA prices CH.png", width = 12, height = 6, dpi = 300,
units = "cm")
rm(list = ls())
library(tidyverse)
library(corrplot)
#Import data
setwd("path")
data <- read.csv('0_df_final_ch-de.csv')
setwd("C:/Users/Uni2/Desktop/StatisticalLab/git_Trading_electricity/RWE-ETH-Power-Trading/00_Data Retrieval and Cleaning")
data <- read.csv('0_df_final_ch-de.csv')
#Drop columns w/ variables linked with it, at or fr --> No scope
#There is lu... we have to undersatnd how to use it
no_col_names <- c("it", "fr","IT", "FR","it_ch", "fr_ch","IT_CH", "FR_CH",
"at", "ch_at")
data <- data %>% select(-ends_with(no_col_names))
#Remove since all NA, or few values are not NA (+are missig in last years)
data <- data %>% select(-c(wind_onshore_actual_consumption_de,solar_actual_consumption_de,
other_renewable_actual_consumption_de, hydro_water_reservoir_actual_consumption_de,
fossil_oil_actual_consumption_de, nuclear_actual_consumption_de))
data %>% colnames
str(data)
#Formatting time
data <- data %>%
mutate(date= as.POSIXct(date, format = "%Y-%m-%d %H:%M"))
str(data)   #HConverting varaible into factor ecc.
#Sorting based on time
data <- data[order(data$date),]
data <- data %>% mutate(dst = factor(dst))
#Remove NA data
date_cut <- '2024-02-01 01:00:00'
cond <- data$date < as.POSIXct(date_cut, format = "%Y-%m-%d %H:%M")
data <- data %>% filter(cond)
data %>% colnames()
#New colum
#day_ahead_price_de_ch : day_ahead_price_de - day_ahead_price_ch - auction_price
data$margin <- data$day_ahead_price_de - data$day_ahead_price_ch - data$auction_price
#Plot day_ahead_price_ch wrt time
ggplot(data = data, aes(x = date, y = day_ahead_price_ch)) +
geom_line() +
geom_smooth(se = FALSE) +
labs(x = "Hourly data", y = "Electricity price ch")
#Consider a window of time that is reasonably 'stationary'
date_cut <- '2023-01-01 01:00:00'
cond <- data$date > as.POSIXct(date_cut, format = "%Y-%m-%d %H:%M")
data_window <- subset(data, cond)
#Plot prices in a 'reasonable' time window
ggplot(data = data_window, aes(x = date)) +
geom_line(aes(y = day_ahead_price_de, color = "day_ahead_price_de")) +
geom_line(aes(y = day_ahead_price_ch, color = "day_ahead_price_ch")) +
geom_line(aes(y = auction_price, color = "auction_price")) +
labs(title = "Prices day ahead",
x = "Hourly data",
y = "Price day ahead",
color = "Day ahead prices") +
scale_color_manual(values = c("day_ahead_price_de" = "blue", "day_ahead_price_ch" = "red",
"auction_price" = "green"))+
theme_minimal()
#SMALL MODEL
#WINDOW 2023
dependent <- data_window %>% select(c(auction_price, day_ahead_price_ch, day_ahead_price_de, margin))
dependent <- dependent[1:(nrow(dependent)-1),]
#SMALL MODEL
#WINDOW 2023
dependent <- data_window %>% select(c(day_ahead_price_de))
dependent <- dependent[1:(nrow(dependent)-1),]
covariates <- data_window %>% select(-c(margin, date, auction_price, day_ahead_price_ch, day_ahead_price_de))
covariates <- covariates %>% select(where(~ !is.factor(.)))
covariates <- covariates[2:nrow(covariates),]
data_shifted <- bind_cols(dependent, covariates)
#SMALL MODEL
#WINDOW 2023
dependent <- data_window %>% select(c(day_ahead_price_de))
dependent <- dependent[1:(nrow(dependent)-1),]
covariates <- data_window %>% select(-c(margin, date, auction_price, day_ahead_price_ch, day_ahead_price_de))
covariates <- covariates %>% select(where(~ !is.factor(.)))
covariates <- covariates[2:nrow(covariates),]
#SMALL MODEL
#WINDOW 2023
dependent <- data_window %>% select(c(day_ahead_price_de))
dependent <- dependent[1:(nrow(dependent)-1),]
covariates <- data_window %>% select(-c(margin, date, auction_price, day_ahead_price_ch, day_ahead_price_de))
covariates <- covariates[2:nrow(covariates),]
data_shifted <- bind_cols(dependent, covariates)
View(data_shifted)
View(data_shifted)
View(dependent)
data_shifted$day_ahead_price_de
data_shifted <- cbind(dependent, covariates)
View(data_shifted)
data_shifted <- data_shifted %>%
mutate(rename(day_ahead_price_de = dependent))
data_shifted <- data_shifted %>%
mutate(rename(day_ahead_price_de, dependent))
data_shifted <- data_shifted %>%
mutate(rename(day_ahead_price_de = dependent))
fit <- arimax(x = dependent, order = c(1, 0, 1),
xreg = covariates)
fit <- arima(x = dependent, order = c(1, 0, 1),
xreg = covariates)
summary(covariates)
covariates <- covariates %>%
select(where(~ !any(is.na(.))))
View(covariates)
View(covariates)
covariates <- data_window %>% select(-c(margin, date, auction_price, day_ahead_price_ch, day_ahead_price_de))
covariates <- covariates[2:nrow(covariates),]
data_shifted <- cbind(dependent, covariates)
summary(covariates)
fit <- arima(x = dependent, order = c(1, 0, 1),
xreg = covariates[, 2:7])
cov2 <- covariates[, 2:7]
fit <- arima(x = dependent, order = c(1, 0, 1),
xreg = cov2)
cov2 <- covariates[, 2:8]
fit <- arima(x = dependent, order = c(1, 0, 1),
xreg = cov2)
cov2 <- covariates[, 5:10]
fit <- arima(x = dependent, order = c(1, 0, 1),
xreg = cov2)
cov2 <- covariates[, 5:7]
fit <- arima(x = dependent, order = c(1, 0, 1),
xreg = cov2)
fit <- arima(x = dependent, order = c(1, 0, 1),
xreg = cov2, method = 'CSS')
fit <- arima(x = dependent, order = c(1, 0, 1),
xreg = cov2, optim.control = list(hessian = F))
summary(fit)
#SMALL MODEL
#WINDOW 2023
dependent <- data %>% select(c(day_ahead_price_de))
dependent <- dependent[1:(nrow(dependent)-1),]
covariates <- data %>% select(-c(margin, date, auction_price, day_ahead_price_ch, day_ahead_price_de))
covariates <- covariates[2:nrow(covariates),]
data_shifted <- cbind(dependent, covariates)
summary(covariates)
fit <- arima(x = dependent, order = c(1, 0, 1),
xreg = cov2)
#SMALL MODEL
#WINDOW 2023
dependent <- data %>% select(c(day_ahead_price_de))
dependent <- dependent[1:(nrow(dependent)-1),]
covariates <- data %>% select(-c(margin, date, auction_price, day_ahead_price_ch, day_ahead_price_de))
covariates <- covariates[2:nrow(covariates),]
cov2 <- covariates[, 5:7]
fit <- arima(x = dependent, order = c(1, 0, 1),
xreg = cov2)
summary(fit)
load(forecast)
library(forecast)
?auto.arima
fit <- auto.arima(x = dependent,
xreg = cov2)
fit <- auto.arima(x = dependent,
xreg = as.matrix(cov2))
summary(fit)
plot(fit)
fore <- forecast(fit, h = 2)
fore <- forecast(fit, h = 2, xreg = as.matrix(cov2)[1:12, ] )
plot(fore)
autplot(forecast(fit, h = 2, xreg = as.matrix(cov2)[1:12, ]))
autoplot(forecast(fit, h = 2, xreg = as.matrix(cov2)[1:12, ]))
fore <- forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ] )
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]))
fore
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(40000, 50000))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(42500, 45000))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(4400, 45000))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(44000, 45000))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(47000, 45000))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(44600, 45000))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(44300, 45000))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(44300, 44800))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(44300, 44400))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(44400, 44490))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(44400, 44520))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(44500, 44520))
?auto.arima
fit <- auto.arima(x = dependent,
xreg = as.matrix(cov2), max.d = 0)
summary(fit)
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(44500, 44520))
autoplot(forecast(fit, h = 12, xreg = as.matrix(cov2)[1:12, ]), xlim = c(44300, 44520))
acf(fit$residuals)
summary(fit$residuals)
acf(na.omit(fit$residuals))
d2 <- as.ts(cbind(dependent, data[1:(nrow(dependent)-1), 'date'] ))
d2 <- as.ts(cbind(dependent, data[1:(nrow(dependent)-1), date] ))
data[1:(nrow(dependent)-1), date]
d2 <- as.ts(zoo(dependent, data$date[1:(nrow(dependent)-1)]))
library(zoo)
d2 <- as.ts(zoo(dependent, data$date[1:(nrow(dependent)-1)]))
data$date[1:(nrow(dependent)-1)]
nrow(dependent)
rm(list = ls())
library(tidyverse)
library(corrplot)
#Import data
setwd("path")
data <- read.csv('0_df_final_ch-de.csv')
#Drop columns w/ variables linked with it, at or fr --> No scope
#There is lu... we have to undersatnd how to use it
no_col_names <- c("it", "fr","IT", "FR","it_ch", "fr_ch","IT_CH", "FR_CH",
"at", "ch_at")
data <- data %>% select(-ends_with(no_col_names))
#Remove since all NA, or few values are not NA (+are missig in last years)
data <- data %>% select(-c(wind_onshore_actual_consumption_de,solar_actual_consumption_de,
other_renewable_actual_consumption_de, hydro_water_reservoir_actual_consumption_de,
fossil_oil_actual_consumption_de, nuclear_actual_consumption_de))
data %>% colnames
str(data)
#Formatting time
data <- data %>%
mutate(date= as.POSIXct(date, format = "%Y-%m-%d %H:%M"))
str(data)   #HConverting varaible into factor ecc.
#Sorting based on time
data <- data[order(data$date),]
data <- data %>% mutate(dst = factor(dst))
#Remove NA data
date_cut <- '2024-02-01 01:00:00'
cond <- data$date < as.POSIXct(date_cut, format = "%Y-%m-%d %H:%M")
data <- data %>% filter(cond)
data %>% colnames()
#Consider a window of time that is reasonably 'stationary'
date_cut <- '2023-01-01 01:00:00'
cond <- data$date > as.POSIXct(date_cut, format = "%Y-%m-%d %H:%M")
data_window <- subset(data, cond)
#SMALL MODEL
#WINDOW 2023
dependent <- data %>% select(c(day_ahead_price_de))
dependent <- dependent[1:(nrow(dependent)-1),]
covariates <- data %>% select(-c(margin, date, auction_price, day_ahead_price_ch, day_ahead_price_de))
covariates <- covariates[2:nrow(covariates),]
covariates <- data %>% select(-c(margin, date, auction_price, day_ahead_price_ch, day_ahead_price_de))
covariates <- data %>% select(-c(date, auction_price, day_ahead_price_ch, day_ahead_price_de))
covariates <- covariates[2:nrow(covariates),]
library(forecast)
library(forecast)
#fit <- arima(x = dependent, order = c(1, 0, 1),
#              xreg = cov2)
#summary(fit)
#?auto.arima
#
#
#fit <- auto.arima(x = dependent,
#             xreg = as.matrix(cov2), max.d = 0)
#?auto.arima
#summary(fit)
library(zoo)
#plot(fit)
#data$date
d2 <- as.ts(zoo(dependent, data$date[1:(nrow(dependent)-1)]))
nrow(dependent)
#plot(fit)
#data$date
d2 <- as.ts(zoo(dependent, data$date[1:(length(dependent)-1)]))
#plot(fit)
#data$date
dates <- data$date[1:(length(dependent)-1)])
#plot(fit)
#data$date
dates <- data$date[1:(length(dependent)-1)]
d2 <- as.ts(zoo(dependent, dates))
length(unique(dates))
summary(dates)
duplicate(datews)
duplicate(dates)
duplicates(dates)
duplicated(dates)
date[duplicated(dates)]
dates[duplicated(dates)]
fit <- auto.arima(x = dependent,
xreg = as.matrix(covariates))
fit <- auto.arima(x = dependent,
xreg = matrix(covariates))
View(covariates)
View(covariates)
fit <- auto.arima(x = dependent,
xreg = matrix(covariates[, 10:15]))
str(covariates)
cov3 <- covariates %>%
select(-dst)
cov3 <- cov3 %>%
mutate(allocatedCapacity = numeric(allocatedCapacity),
ATC = numeric(ATC))
cov3 <- cov3 %>%
mutate(allocatedCapacity = as.numeric(allocatedCapacity),
ATC = as.numeric(ATC))
str(cov3)
fit <- auto.arima(x = dependent,
xreg = matrix(cov3))
fit <- auto.arima(x = dependent,
xreg = as.matrix(cov3))
summary(fit)
autoplot(fit)
plot(fit$residuals)
length(fit$residuals)
summary(fit$residuals)
hist(fit$residuals)
View(fit$residuals)
fit$residuals
str(cov3)
summary(cov3)
cov4 <- cov3 %>%
select(-c(nuclear_actual_aggregated_de,
fossil_gas_actual_consumption_de,
fossil_coal.derived_gas_actual_aggregated_de))
fit2 <- auto.arima(x = dependent,
xreg = as.matrix(cov4))
summary(fit2)
plot(fit2$residuals)
summary(fit2$residuals)
hist(fit2$residuals)
summary(fit2)
dim(cov4)
cov5 <- cov4 %>%
select(-c(actual_load_ch, actual_load_de,
solar_forecast_de, fossil_brown_coal_lignite_actual_aggregated_de,
fossil_hard_coal_actual_aggregated_de, solar_actual_aggregated_de,
wind_onshore_actual_aggregated_de, hydro_reservoir_storage_ch))
fit5 <- auto.arima(x = dependent,
xreg = as.matrix(cov5))
summary(fit5)
AIC(fit2)
AIC(fit5)
AIC(fit2)-AIC(fit5)
summary(fit5)
cov5 <- cov5 %>%
select(-c(capacity_forecast_ch_de_lu,wind_offshore_actual_aggregated_de,
hydro_pumped_storage_actual_consumption_de,hydro_pumped_storage_actual_aggregated_de,
hydro_water_reservoir_ch))
cov6 <- cov5 %>%
select(-c(capacity_forecast_ch_de_lu,wind_offshore_actual_aggregated_de,
hydro_pumped_storage_actual_consumption_de,hydro_pumped_storage_actual_aggregated_de,
hydro_water_reservoir_ch))
cov5 <- cov4 %>%
select(-c(actual_load_ch, actual_load_de,
solar_forecast_de, fossil_brown_coal_lignite_actual_aggregated_de,
fossil_hard_coal_actual_aggregated_de, solar_actual_aggregated_de,
wind_onshore_actual_aggregated_de, hydro_reservoir_storage_ch))
cov6 <- cov5 %>%
select(-c(capacity_forecast_ch_de_lu,wind_offshore_actual_aggregated_de,
hydro_pumped_storage_actual_consumption_de,hydro_pumped_storage_actual_aggregated_de,
hydro_water_reservoir_ch))
fit6 <- auto.arima(x = dependent,
xreg = as.matrix(cov6))
summary(fit6)
AIC(fit6)
AIC(fit5) - AIC(fit6)
?forecastAAPL
??forecastAAPL
??autoplot
???autoplot
?autoplot
??autoplot
forecast::autoplot()
forecast::autoplot
View(forecast::autoplot)
View(autoplot)
View(autoplot())
autoplot
AIC
View(AIC)
View(lm)
View(auto.arima())
View(auto.arima
)
View(autoplot)
fore <- forecast(fit5, h = 24, xreg = as.matrix(cov5)[1:24, ])
fore
dates <- data$date[1:(length(dependent)-1)]
ggplot(aes(dates, dependent)) +
geom_point() +
geom_line()
data_model <- cbind(dates, dependent, cov5)
dim(dependent)
length(dependent)
dim(cov5)
length(dates)
# Plot original time series
plot(dependent, main = "Original Time Series", xlab = "Time", ylab = "Value")
# Plot original time series
plot(dependent, main = "Original Time Series", xlab = "Time", ylab = "Value", type = 'l')
forecast_values <- forecast(fit5, h = 24, xreg = as.matrix(cov5)[1:24, ])
# Overlay forecast quantiles on the plot
lines(forecast_values$lower[, "80%"], col = "blue", lty = 2)  # 80% quantile
lines(forecast_values$upper[, "80%"], col = "blue", lty = 2)  # 80% quantile
lines(forecast_values$lower[, "95%"], col = "green", lty = 2)  # 95% quantile
lines(forecast_values$upper[, "95%"], col = "green", lty = 2)  # 95% quantile
# Plot original time series
plot(dependent[1:30], main = "Original Time Series", xlab = "Time", ylab = "Value", type = 'l')
# Overlay forecast quantiles on the plot
lines(forecast_values$lower[, "80%"], col = "blue", lty = 2)  # 80% quantile
lines(forecast_values$upper[, "80%"], col = "blue", lty = 2)  # 80% quantile
lines(forecast_values$lower[, "95%"], col = "green", lty = 2)  # 95% quantile
lines(forecast_values$upper[, "95%"], col = "green", lty = 2)  # 95% quantile
# Plot original time series
plot(dependent[1:30], main = "Original Time Series", xlab = "Time", ylab = "Value", type = 'l',
xlim = c(0, 40))
# Overlay forecast quantiles on the plot
lines(forecast_values$lower[, "80%"], col = "blue", lty = 2)  # 80% quantile
lines(forecast_values$upper[, "80%"], col = "blue", lty = 2)  # 80% quantile
lines(forecast_values$lower[, "95%"], col = "green", lty = 2)  # 95% quantile
lines(forecast_values$upper[, "95%"], col = "green", lty = 2)  # 95% quantile
# Plot original time series
plot(dependent, main = "Original Time Series", xlab = "Time", ylab = "Value", type = 'l',
xlim = c(0, 40))
# Plot original time series
plot(dependent, main = "Original Time Series", xlab = "Time", ylab = "Value", type = 'l')
# Overlay forecast quantiles on the plot
lines(forecast_values$lower[, "80%"], col = "blue", lty = 2)  # 80% quantile
lines(forecast_values$upper[, "80%"], col = "blue", lty = 2)  # 80% quantile
lines(forecast_values$lower[, "95%"], col = "green", lty = 2)  # 95% quantile
lines(forecast_values$upper[, "95%"], col = "green", lty = 2)  # 95% quantile
# Plot original time series
plot(dependent[44500:44509], main = "Original Time Series", xlab = "Time", ylab = "Value", type = 'l')
# Overlay forecast quantiles on the plot
lines(forecast_values$lower[, "80%"], col = "blue", lty = 2)  # 80% quantile
lines(forecast_values$upper[, "80%"], col = "blue", lty = 2)  # 80% quantile
lines(forecast_values$lower[, "95%"], col = "green", lty = 2)  # 95% quantile
lines(forecast_values$upper[, "95%"], col = "green", lty = 2)  # 95% quantile
