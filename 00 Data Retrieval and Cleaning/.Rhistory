across(
contains("other_actual_aggregated"),
~ lag(., n = 24),
.names = "{.col}_lag_24"
),
across(
contains("other_renewable_actual_aggregated"),
~ lag(., n = 24),
.names = "{.col}_lag_24"
),
across(
contains("solar"),
~ lag(., n = 24),
.names = "{.col}_lag_24"
),
across(
contains("solar_actual_aggregated"),
~ lag(., n = 24),
.names = "{.col}_lag_24"
),
across(
contains("solar_forecast"),
~ lag(., n = 24),
.names = "{.col}_lag_24"
),
across(
contains("waste_actual_aggregated"),
~ lag(., n = 24),
.names = "{.col}_lag_24"
),
across(
contains("wind_offshore_actual_aggregated"),
~ lag(., n = 24),
.names = "{.col}_lag_24"
),
across(
contains("wind_onshore"),
~ lag(., n = 24),
.names = "{.col}_lag_24"
),
across(
contains("wind_onshore_actual_aggregated"),
~ lag(., n = 24),
.names = "{.col}_lag_24"
),
across(
contains("wind_onshore_forecast"),
~ lag(., n = 24),
.names = "{.col}_lag_24"
),
g1_dummy_lag_24 = lag(g1_dummy, n = 24),
g2_dummy_lag_24 = lag(g2_dummy, n = 24),
g3_dummy_lag_24 = lag(g3_dummy, n = 24),
)
df_scenario_c |> write_csv("0_df_final_imputed_shifting_c.csv")
df_scenario_a %>%  summary()
df %>% summary()
df |>
colnames() |>
sort()
df_scenario_a %>% summary()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggsci)
library(scales)
library(shiny)
library(ncvreg)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Default theme for charts
theme_set(
theme_bw() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(
face = "italic", size = 10, colour = "green50"
)
)
)
df_scenario_a <- read_csv("../00 Data Retrieval and Cleaning/0_df_final_imputed_shifting_a.csv")
df_scenario_a %>% summary()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggsci)
library(scales)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Default theme for charts
theme_set(
theme_bw() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(
face = "italic", size = 10, colour = "grey50"
)
)
)
# Read data - both direction JAO
data_ch_de = read_csv("../00 Data Retrieval and Cleaning/0_df_final_ch-de_UTC.csv")
data_de_ch = read_csv("../00 Data Retrieval and Cleaning/0_df_final_de-ch_UTC.csv")
data_ch_de <- data_ch_de %>%
rename(auction_price_ch_de = auction_price,
allocatedCapacity_ch_de = allocatedCapacity, ATC_ch_de = ATC)
#Initialize df that contain ALL variables
df <- data_ch_de %>%
mutate(auction_price_de_ch = data_de_ch$auction_price,
allocatedCapacity_de_ch = data_de_ch$allocatedCapacity,
ATC_de_ch = data_de_ch$ATC) %>%
arrange(date)
rm(data_ch_de, data_de_ch)
reorder_cols = c(
"date", "auction_price_ch_de", "auction_price_de_ch",
"allocatedCapacity_ch_de", "allocatedCapacity_de_ch",
"ATC_ch_de", "ATC_de_ch", "dst", "day_ahead_price_at", "day_ahead_price_ch",
"day_ahead_price_de", "day_ahead_price_fr", "day_ahead_price_it"
)
df = bind_cols(
# Manually reordered columns
df |>
select(any_of(reorder_cols)),
# Alphabetically reordered columns
df |>
select(
df |>
select(-any_of(reorder_cols)) |>
colnames() |>
sort()
)
)
df |>
select(
date,
allocatedCapacity_ch_de, allocatedCapacity_de_ch,
ATC_ch_de, ATC_de_ch
) |>
pivot_longer(-date) |>
mutate(
direction = case_when(
name == "allocatedCapacity_ch_de" ~ "ch_de",
name == "allocatedCapacity_de_ch" ~ "de_ch",
name == "ATC_ch_de" ~ "ch_de",
name == "ATC_de_ch" ~ "de_ch",
),
name = case_when(
name == "allocatedCapacity_ch_de" ~ "allocated",
name == "allocatedCapacity_de_ch" ~ "allocated",
name == "ATC_ch_de" ~ "ATC",
name == "ATC_de_ch" ~ "ATC",
),
) |>
ggplot(aes(date, value, colour = name)) +
geom_line(alpha = 0.5) +
facet_wrap(~ direction, ncol = 1)
df = df |>
select(-contains("ATC"))
df = df |>
mutate(
cal_year = year(date),
cal_month = month(date),
cal_day_in_month = day(date),
cal_day_in_week = wday(date, label = F),
cal_week_in_year = week(date),
cal_quarter = quarter(date),
cal_hour_in_day = hour(date),
)
split_date = ymd_hm("2024-01-31 23:00")
df <- df %>%
filter(date < split_date)
remove_cols = df |>
select(-c(date)) |>
pivot_longer(everything()) |>
group_by(name) |>
summarise(var = var(value, na.rm = T)) |>
ungroup() |>
filter(var < 1e-10) |>
pull(name)
df = df |>
select(!all_of(remove_cols))
tibble(
percentage = seq(0.01, 0.99, by = 0.01),
cols = map_dbl(percentage, function(pct){
df |>
select(
colMeans(is.na(df)) |>
enframe() |>
filter(value > pct) |>
pull(name)
) |>
ncol()
})
) |>
ggplot(aes(percentage, cols)) +
geom_line() +
geom_point() +
labs(title = "Number of columns with more than x% missing values",
y = "# of cols", x = "Minimum Missing Percentage") +
scale_x_continuous(breaks = seq(0, 1, 0.1),
labels = percent_format())
# Discard the columns with too many missing values (threshold 60%)
df = df |>
select(-(df |>
is.na() |>
colMeans() |>
enframe() |>
filter(value > 0.6) |>
pull(name)))
df |>
select(hydro_pumped_storage_actual_aggregated_fr,
hydro_pumped_storage_actual_consumption_fr) |>
is.na() |>
colMeans()
df |>
select(hydro_pumped_storage_actual_aggregated_fr,
hydro_pumped_storage_actual_consumption_fr) |>
mutate(tmp = xor(is.na(hydro_pumped_storage_actual_aggregated_fr),
is.na(hydro_pumped_storage_actual_consumption_fr))) |>
summarise(xor_missing = mean(tmp))
df |>
slice(5200:5300) |>
select(date,
hydro_pumped_storage_actual_aggregated_fr,
hydro_pumped_storage_actual_consumption_fr) |>
pivot_longer(-date) |>
ggplot(aes(date, value, colour = name)) +
geom_line()
df = df |>
mutate(
hydro_pumped_storage_actual_aggregated_fr = ifelse(
is.na(hydro_pumped_storage_actual_aggregated_fr),
0,
hydro_pumped_storage_actual_aggregated_fr
),
hydro_pumped_storage_actual_consumption_fr = ifelse(
is.na(hydro_pumped_storage_actual_consumption_fr),
0,
hydro_pumped_storage_actual_consumption_fr
)
)
# Identify columns containing "actual" and "forecast" using grep
actual_columns <- grep("actual", names(df), value = TRUE)
forecast_columns <- grep("forecast", names(df), value = TRUE)
print(actual_columns)
print('')
print(forecast_columns)
remove_forecast <- c('solar_forecast_fr', 'solar_forecast_ch', 'solar_forecast_it','solar_forecast_at', 'wind_offshore_forecast_de', 'wind_onshore_forecast_de', 'wind_onshore_forecast_ch', 'wind_onshore_forecast_at')
df <- df %>%
select(!all_of(remove_forecast))
df |>
write_csv("../00 Data Retrieval and Cleaning/0_df_final_not_imputed.csv")
df |>
select(contains("auction")) |>
is.na() |>
colSums()
# Identify columns with missing values
missing_cols = df |>
is.na() |>
colSums() |>
enframe() |>
filter(value != 0) |>
pull(name)
# Create three different dataframes of same row length and combine them
# to the final data frame again
# 1: Columns that have no missing values
# 2: Columns that have missing values filled with zeros where missing
# 3: Columns that have missing values transformed to dummies
df = bind_cols(
# 1
df |>
select(-any_of(missing_cols)),
# 2
df |>
select(any_of(missing_cols)) |>
mutate(id = 1:n()) |>
pivot_longer(-id) |>
mutate(value = ifelse(is.na(value), 0, value)) |>
pivot_wider(names_from = name, values_from = value) |>
select(-id),
# 3
df |>
select(any_of(missing_cols)) |>
mutate(id = 1:n()) |>
pivot_longer(-id) |>
mutate(value = ifelse(is.na(value), 1, 0)) |>
mutate(name = paste0(name, "_missing_dummy")) |>
pivot_wider(names_from = name, values_from = value) |>
select(-id)
)
df |>
is.na() |>
colSums() |>
enframe() |>
filter(value != 0)
duplicated = df |>
select(contains("dummy")) |>
pivot_longer(everything()) |>
group_by(name) |>
summarise(value = mean(value)) |>
ungroup() |>
group_by(value) |>
mutate(mean_count = n()) |>
ungroup() |>
filter(mean_count != 1)
duplicated |>
group_by(name) |>
nest(name = name) |>
ungroup() |>
mutate(
unique_values = map(name, function(NAME){
df |>
select(pull(NAME)) |>
mutate(row_idx = 1:n()) |>
pivot_longer(-row_idx) |>
group_by(row_idx) |>
summarise(unique_values = n_distinct(value)) |>
ungroup() |>
filter(unique_values > 1) |>
select(row_idx)
})
) |>
unnest(unique_values)
duplicated |>
arrange(mean_count) |>
print(n=100)
new_dummies = df |>
select(
duplicated |>
group_by(mean_count) |>
slice(1) |>
ungroup() |>
arrange(mean_count) |>
pull(name)
) |>
rename(
"g1_dummy" = "hydro_reservoir_storage_at_missing_dummy",
"g2_dummy" = "biomass_actual_aggregated_fr_missing_dummy",
"g3_dummy" = "actual_load_ch_missing_dummy",
)
df = df |>
select(-c(duplicated |>
pull(name))) |>
bind_cols(new_dummies)
df |>
select(contains("dummy")) |>
pivot_longer(everything()) |>
group_by(name) |>
summarise(value = mean(value)) |>
ungroup() |>
add_count(value) |>
arrange(value) |>
filter(n > 1)
lm(day_ahead_price_de ~ ., data = df) |>
broom::tidy() |>
filter(is.na(estimate))
df |>
write_csv("../00 Data Retrieval and Cleaning/0_df_final_imputed.csv")
df |>
colnames() |>
sort()
df_scenario_a = df |>
mutate(
across(contains("actual_load"), ~ lag(., n = 24)),
across(contains("biomass_actual_aggregated"), ~ lag(., n = 24)),
across(contains("capacity_forecast"), ~ lag(., n = 0)),
across(contains("crossborder_actual_flow"), ~ lag(., n = 24)),
across(contains("fossil_brown_coal_lignite_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_coal.derived_gas_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_gas_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_hard_coal_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_oil_actual_aggregated"), ~ lag(., n = 24)),
across(contains("geothermal_actual_aggregated"), ~ lag(., n = 24)),
across(contains("hydro_pumped_storage"), ~ lag(., n = 24)),
across(contains("hydro_pumped_storage_actual_aggregated"), ~ lag(., n = 24)),
across(contains("hydro_pumped_storage_actual_consumption"), ~ lag(., n = 24)),
across(contains("hydro_reservoir_storage"), ~ lag(., n = 24)),
across(contains("hydro_run.of.river_and_poundage"), ~ lag(., n = 24)),
across(contains("hydro_run.of.river_and_poundage_actual_aggregated"), ~ lag(., n = 24)),
across(contains("hydro_water_reservoir"), ~ lag(., n = 24)),
across(contains("hydro_water_reservoir_actual_aggregated"), ~ lag(., n = 24)),
across(contains("nuclear"), ~ lag(., n = 24)),
across(contains("nuclear_actual_aggregated"), ~ lag(., n = 24)),
across(contains("other_actual_aggregated"), ~ lag(., n = 24)),
across(contains("other_renewable_actual_aggregated"), ~ lag(., n = 24)),
across(contains("solar"), ~ lag(., n = 24)),
across(contains("solar_actual_aggregated"), ~ lag(., n = 24)),
across(contains("solar_forecast"), ~ lag(., n = 0)),
across(contains("waste_actual_aggregated"), ~ lag(., n = 24)),
across(contains("wind_offshore_actual_aggregated"), ~ lag(., n = 24)),
across(contains("wind_onshore"), ~ lag(., n = 24)),
across(contains("wind_onshore_actual_aggregated"), ~ lag(., n = 24)),
across(contains("wind_onshore_forecast"), ~ lag(., n = 0)),
g1_dummy = lag(g1_dummy, n = 24),
g2_dummy = lag(g2_dummy, n = 24),
g3_dummy = lag(g3_dummy, n = 24),
)
df_scenario_a |> write_csv("0_df_final_imputed_shifting_a.csv")
df_scanrio_a %>% summary()
df_scenario_a %>% summary()
df_scenario_a %>% filter(is.na(colMeans(df_scenario_a))) %>% pull(name)
df_scenario_a %>% filter(is.na(colMeans(.))) %>% pull(name)
df_scenario_a %>% filter(is.na(.)) %>% pull(name)
df_scenario_a %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
select(where(~ . > 47)) %>%
colnames()
df_scenario_a = df |>
mutate(
across(contains("actual_load"), ~ lag(., n = 24)),
across(contains("biomass_actual_aggregated"), ~ lag(., n = 24)),
across(contains("capacity_forecast"), ~ lag(., n = 0)),
across(contains("crossborder_actual_flow"), ~ lag(., n = 24)),
across(contains("fossil_brown_coal_lignite_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_coal.derived_gas_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_gas_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_hard_coal_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_oil_actual_aggregated"), ~ lag(., n = 24)),
across(contains("geothermal_actual_aggregated"), ~ lag(., n = 24)),
across(contains("hydro_pumped_storage"), ~ lag(., n = 24)),
across(contains("hydro_reservoir_storage"), ~ lag(., n = 24)),
across(contains("hydro_run.of.river_and_poundage"), ~ lag(., n = 24)),
across(contains("hydro_run.of.river_and_poundage_actual_aggregated"), ~ lag(., n = 24)),
across(contains("hydro_water_reservoir"), ~ lag(., n = 24)),
across(contains("hydro_water_reservoir_actual_aggregated"), ~ lag(., n = 24)),
across(contains("nuclear"), ~ lag(., n = 24)),
across(contains("nuclear_actual_aggregated"), ~ lag(., n = 24)),
across(contains("other_actual_aggregated"), ~ lag(., n = 24)),
across(contains("other_renewable_actual_aggregated"), ~ lag(., n = 24)),
across(contains("solar"), ~ lag(., n = 24)),
across(contains("solar_forecast"), ~ lag(., n = 0)),
across(contains("waste_actual_aggregated"), ~ lag(., n = 24)),
across(contains("wind_offshore_actual_aggregated"), ~ lag(., n = 24)),
across(contains("wind_onshore"), ~ lag(., n = 24)),
across(contains("wind_onshore_actual_aggregated"), ~ lag(., n = 24)),
across(contains("wind_onshore_forecast"), ~ lag(., n = 0)),
g1_dummy = lag(g1_dummy, n = 24),
g2_dummy = lag(g2_dummy, n = 24),
g3_dummy = lag(g3_dummy, n = 24),
)
df_scenario_a |> write_csv("0_df_final_imputed_shifting_a.csv")
df_scenario_a %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
select(where(~ . > 47)) %>%
colnames()
df_scenario_a = df |>
mutate(
across(contains("actual_load"), ~ lag(., n = 24)),
across(contains("biomass_actual_aggregated"), ~ lag(., n = 24)),
across(contains("capacity_forecast"), ~ lag(., n = 0)),
across(contains("crossborder_actual_flow"), ~ lag(., n = 24)),
across(contains("fossil_brown_coal_lignite_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_coal.derived_gas_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_gas_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_hard_coal_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_oil_actual_aggregated"), ~ lag(., n = 24)),
across(contains("geothermal_actual_aggregated"), ~ lag(., n = 24)),
across(contains("hydro_pumped_storage"), ~ lag(., n = 24)),
across(contains("hydro_reservoir_storage"), ~ lag(., n = 24)),
across(contains("hydro_run.of.river_and_poundage"), ~ lag(., n = 24)),
across(contains("hydro_run.of.river_and_poundage_actual_aggregated"), ~ lag(., n = 24)),
across(contains("hydro_water_reservoir"), ~ lag(., n = 24)),
across(contains("nuclear"), ~ lag(., n = 24)),
across(contains("nuclear_actual_aggregated"), ~ lag(., n = 24)),
across(contains("other_actual_aggregated"), ~ lag(., n = 24)),
across(contains("other_renewable_actual_aggregated"), ~ lag(., n = 24)),
across(contains("solar"), ~ lag(., n = 24)),
across(contains("solar_forecast"), ~ lag(., n = 0)),
across(contains("waste_actual_aggregated"), ~ lag(., n = 24)),
across(contains("wind_offshore_actual_aggregated"), ~ lag(., n = 24)),
across(contains("wind_onshore"), ~ lag(., n = 24)),
across(contains("wind_onshore_forecast"), ~ lag(., n = 0)),
g1_dummy = lag(g1_dummy, n = 24),
g2_dummy = lag(g2_dummy, n = 24),
g3_dummy = lag(g3_dummy, n = 24),
)
df_scenario_a |> write_csv("0_df_final_imputed_shifting_a.csv")
df_scenario_a %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
select(where(~ . > 47)) %>%
colnames()
df_scenario_a = df |>
mutate(
across(contains("actual_load"), ~ lag(., n = 24)),
across(contains("biomass_actual_aggregated"), ~ lag(., n = 24)),
across(contains("capacity_forecast"), ~ lag(., n = 0)),
across(contains("crossborder_actual_flow"), ~ lag(., n = 24)),
across(contains("fossil_brown_coal_lignite_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_coal.derived_gas_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_gas_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_hard_coal_actual_aggregated"), ~ lag(., n = 24)),
across(contains("fossil_oil_actual_aggregated"), ~ lag(., n = 24)),
across(contains("geothermal_actual_aggregated"), ~ lag(., n = 24)),
across(contains("hydro_pumped_storage"), ~ lag(., n = 24)),
across(contains("hydro_reservoir_storage"), ~ lag(., n = 24)),
across(contains("hydro_run.of.river_and_poundage"), ~ lag(., n = 24)),
across(contains("hydro_run.of.river_and_poundage_actual_aggregated"), ~ lag(., n = 24)),
across(contains("hydro_water_reservoir"), ~ lag(., n = 24)),
across(contains("nuclear"), ~ lag(., n = 24)),
across(contains("other_actual_aggregated"), ~ lag(., n = 24)),
across(contains("other_renewable_actual_aggregated"), ~ lag(., n = 24)),
across(contains("solar"), ~ lag(., n = 24)),
across(contains("solar_forecast"), ~ lag(., n = 0)),
across(contains("waste_actual_aggregated"), ~ lag(., n = 24)),
across(contains("wind_offshore_actual_aggregated"), ~ lag(., n = 24)),
across(contains("wind_onshore"), ~ lag(., n = 24)),
across(contains("wind_onshore_forecast"), ~ lag(., n = 0)),
g1_dummy = lag(g1_dummy, n = 24),
g2_dummy = lag(g2_dummy, n = 24),
g3_dummy = lag(g3_dummy, n = 24),
)
df_scenario_a |> write_csv("0_df_final_imputed_shifting_a.csv")
df_scenario_a %>%
summarise(across(everything(), ~ sum(is.na(.)))) %>%
select(where(~ . > 47)) %>%
colnames()
